name: CI/CD

on:
  push:
    tags: [v*]
    branches:
      - main
  pull_request:
    # By default, a workflow only runs when a pull_request event's activity type is opened,
    # synchronize, or reopened.
    types: [opened, synchronize, reopened, edited]
    branches:
      - main

permissions: read-all

jobs:
  check-auto-tagging-will-work:
    if: |
      github.event_name == 'pull_request' &&
      (! startsWith(github.ref, 'refs/tags') && ! startsWith(github.ref, 'refs/heads/main'))
    uses: climatepolicyradar/reusable-workflows/.github/workflows/check-auto-tagging-will-work.yml@v3

  code-quality:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success')
    needs:
      - check-auto-tagging-will-work
    permissions:
      # For trunk to post annotations
      checks: write
      # For repo checkout
      contents: read
    uses: climatepolicyradar/reusable-workflows/.github/workflows/python-precommit-validator.yml@v3

  test:
    if: |
      ! cancelled() && always() &&
      (needs.check-auto-tagging-will-work.result == 'skipped' || needs.check-auto-tagging-will-work.result == 'success')
    needs:
      - check-auto-tagging-will-work
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false

      - name: Install dependencies
        run: poetry install --no-root

      - name: Test
        run: |
          make test

  tag:
    runs-on: ubuntu-latest
    if: |
      ! cancelled() && always() &&
      (needs.code-quality.result == 'success' && needs.test.result == 'success') &&
      startsWith(github.ref, 'refs/heads/main')
    permissions:
      contents: write

    needs:
      - code-quality
      - test

    outputs:
      new_tag: ${{ steps.determine_next_tag.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v4
      - uses: fregante/setup-git-user@v2

      - name: Determine new tag version
        id: determine_next_tag
        uses: climatepolicyradar/get-next-tag-from-pr-body@v3

      - name: Create Git tag and push
        run: |
          new_tag="${{ steps.determine_next_tag.outputs.new_tag }}"
          new_tag=${new_tag#v}
          new_tag=${new_tag%-*}

          if [[ -z "${new_tag}" ]]; then
            echo "Could not determine next tag";
            exit 1;
          elif [[ "${new_tag}" != 'Skip' ]]; then
            git tag -a "${new_tag}" -m "Version ${new_version_num}"
            git push --tags origin "${new_tag}"
          fi

  release:
    needs: tag
    if: ${{ ! cancelled() && always() && (needs.tag.result == 'success' && needs.tag.outputs.new_tag != 'Skip')}}
    permissions:
      contents: write
    uses: climatepolicyradar/reusable-workflows/.github/workflows/release.yml@v3
    with:
      new_tag: ${{ needs.tag.outputs.new_tag }}
