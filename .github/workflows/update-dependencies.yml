name: Update Dependencies

on:
  # Auto deploy once the CI/CD action is completed successfully
  workflow_run:
    workflows: [CI/CD]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    strategy:
      matrix:
        include:
          - { repo: navigator-admin-backend, tool: poetry }
          - { repo: navigator-backend, tool: uv }
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: climatepolicyradar/${{ matrix.repo }}
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ matrix.repo }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create false

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Get the latest tag version from navigator-db-client
        id: determine_version
        run: |
          # Fetch the most recent tag from the db-client repository
          LATEST_TAG=$(git ls-remote --tags https://github.com/climatepolicyradar/navigator-db-client.git | grep -v '\^{}' | sed 's/.*refs\/tags\///' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -Vr | head -1)

          if [ -z "$LATEST_TAG" ]; then
            echo "❌ No tags found in navigator-db-client repository"
            exit 1
          fi

          echo "📋 Latest tag: $LATEST_TAG"
          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Validate release tag
        run: |
          # Ensure we have a valid version tag
          if [[ ! "${{ steps.determine_version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid tag format: ${{ steps.determine_version.outputs.version }}"
            echo "Expected format: vX.Y.Z"
            exit 1
          fi
          echo "✅ Valid version: $VERSION"

      - name: Update db-client version
        working-directory: ${{ matrix.repo }}
        run: |
          # Extract version (remove 'v' prefix)
          VERSION="${{ steps.determine_version.outputs.version }}"
          NEW_VERSION="${VERSION#v}"

          echo "🔄 Updating db-client to version ${NEW_VERSION}"

          # Check if pyproject.toml exists
          if [[ ! -f "pyproject.toml" ]]; then
            echo "❌ pyproject.toml not found"
            exit 1
          fi

          # Update based on tool type
          if [ "${{ matrix.tool }}" = "poetry" ]; then
            # Check if db-client dependency exists in Poetry format
            if ! grep -q "db-client.*navigator-db-client" pyproject.toml; then
              echo "❌ db-client dependency not found in pyproject.toml"
              exit 1
            fi
            # Update Poetry format
            if sed -i "s/tag = \"v[0-9]*\.[0-9]*\.[0-9]*\"/tag = \"v${NEW_VERSION}\"/" pyproject.toml; then
              echo "✅ Successfully updated pyproject.toml (Poetry format)"
            else
              echo "❌ Failed to update pyproject.toml"
              exit 1
            fi
            # Update lockfile
            if poetry lock; then
              echo "✅ Successfully updated poetry.lock"
            else
              echo "❌ Failed to update poetry.lock"
              exit 1
            fi
          elif [ "${{ matrix.tool }}" = "uv" ]; then
            # Check if db-client dependency exists in standard format
            if ! grep -q "db-client @ git" pyproject.toml; then
              echo "❌ db-client dependency not found in pyproject.toml"
              exit 1
            fi
            # Update standard Python format
            if sed -i "s/@v[0-9]*\.[0-9]*\.[0-9]*/@v${NEW_VERSION}/" pyproject.toml; then
              echo "✅ Successfully updated pyproject.toml (standard format)"
            else
              echo "❌ Failed to update pyproject.toml"
              exit 1
            fi
            # Update lockfile
            if uv lock; then
              echo "✅ Successfully updated uv.lock"
            else
              echo "❌ Failed to update uv.lock"
              exit 1
            fi
          else
            echo "❌ Invalid tool: ${{ matrix.tool }}"
            exit 1
          fi

      # Determine the user who triggered the workflow. See:
      # https://github.com/orgs/community/discussions/25502
      - name: Determine user
        id: get-user
        run: |
          echo "author=${{ github.actor }}" >> $GITHUB_OUTPUT

      - name: Prepare PR body
        id: get-pr-body
        working-directory: ${{ matrix.repo }}
        run: |
          VERSION="${{ steps.determine_version.outputs.version }}"
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "This PR updates the db-client to version ${VERSION} following the release in navigator-db-client." >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Changes" >> $GITHUB_OUTPUT
          echo "- Updated db-client dependency from previous version to ${VERSION}" >> $GITHUB_OUTPUT
          echo "- Updated lockfile file" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Testing" >> $GITHUB_OUTPUT
          echo "- [ ] Verify the application builds successfully" >> $GITHUB_OUTPUT
          echo "- [ ] Run tests to ensure no breaking changes" >> $GITHUB_OUTPUT
          echo "- [ ] Test deployment to staging environment" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Automated PR" >> $GITHUB_OUTPUT
          echo "This PR was automatically created by the GitHub Actions workflow in navigator-db-client." >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.CROSS_REPO_TOKEN }}
          path: ${{ matrix.repo }}
          commit-message: Bump db-client to ${{ steps.determine_version.outputs.version }}
          title: ":robot: Bump db-client to ${{ steps.determine_version.outputs.version }}"
          body: ${{ steps.get-pr-body.outputs.body }}
          branch: bump-db-client-to-${{ steps.determine_version.outputs.version }}
          author: >
            ${{ steps.get-user.outputs.author }}
            <${{ steps.get-user.outputs.author }}@users.noreply.github.com>
